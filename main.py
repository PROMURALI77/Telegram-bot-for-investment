import re

import random

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types.message import ContentType
from aiogram.types import InputFile

from db import Database
import config
import keyboard 

import datetime

from aiogram.contrib.fsm_storage.memory import MemoryStorage


from aiogram.dispatcher import FSMContext

from aiogram.dispatcher.filters.state import StatesGroup, State

from utils import get_investment_text

from datetime import timedelta


bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = Database("database.db")
now = datetime.datetime.now()

class Form(StatesGroup):
    vivod = State()
    menu = State()
    popol = State()
    invest = State()
    calc = State()
    addb = State()
    admPass = State()
    oplata = State()

async def on_startup(_):
    print('bot online')

KASSA = '' #Payment key

async def check_sub_channels(channels, user_id):
    for channel in channels:
        chat_member = await bot.get_chat_member(chat_id=channel[1], user_id=user_id)
        if chat_member['status'] == 'left':
            return False
    return True

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type != 'private':
        return
    if not db.user_exists(message.from_user.id):
        start_command = message.text 
        referrer_id = str(start_command[7:])
        if str(referrer_id) != "":
            if str(referrer_id) != str(message.from_user.id):
                db.add_user(message.from_user.id, referrer_id)
                try:
                    await bot.send_message(referrer_id, "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
                except:
                    pass
            else:
                await bot.send_message(message.from_user.id, "–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Å—Å—ã–ª–∫–µ!")
        else:
            db.add_user(message.from_user.id)
        if await check_sub_channels(config.CHANNELS, message.from_user.id):
            await bot.send_message(message.from_user.id, f"| –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ EXODUS |, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é", reply_markup=keyboard.main)
        else:
            await bot.delete_message(message.from_user.id)
            await bot.send_message(message.from_user.id, config.NOT_SUB_MESSAGE, reply_markup=keyboard.showKanal())

@dp.callback_query_handler(text='subchanneldone')
async def subchanneldone(message : types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    if await check_sub_channels(config.CHANNELS, message.from_user.id):
        await bot.send_message(message.from_user.id, f"| –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ EXODUS |, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é", reply_markup=keyboard.main)
    else:
            await bot.send_message(message.from_user.id, config.NOT_SUB_MESSAGE, reply_markup=keyboard.showKanal())

#–°—Ç–∞—Ç–∞ –Æ–∑–µ—Ä–∞

@dp.message_handler(Text("üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
async def profile(message: types.Message, state: FSMContext):
    if db.check_vip(message.from_user.id):
         await bot.send_message(message.from_user.id,text=f"ü§ñ –í–∞—à ID: {message.from_user.id}\nüåü –°—Ç–∞—Ç—É—Å: –í–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nüí≥ –í–∞—à –ë–∞–ª–∞–Ω—Å: {db.user_balance(message.from_user.id)}‚ÇΩ\nüë• –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤: {db.count_reeferals(message.from_user.id)} —á–µ–ª.", reply_markup=keyboard.main)
    else:
        await bot.send_message(message.from_user.id,text=f"ü§ñ –í–∞—à ID: {message.from_user.id}\nüí≥ –í–∞—à –ë–∞–ª–∞–Ω—Å: {db.user_balance(message.from_user.id)}‚ÇΩ\nüë• –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤: {db.count_reeferals(message.from_user.id)} —á–µ–ª.", reply_markup=keyboard.main)
  
@dp.message_handler(Text("üóí –û–±—É—á–µ–Ω–∏–µ"))
async def profile(message: types.Message):
    await bot.send_message(message.from_user.id,text=f"üóí –ü–µ—Ä–µ–π–¥—è –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ, –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–±–æ—Ç–µ —Å –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–æ–º.\n\n----", reply_markup=keyboard.main)

#–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π

@dp.message_handler(Text("üñ® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
async def profiler(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id,text=f"üí± –í–≤–µ–¥–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—á—ë—Ç–∞ –í–∞—à–µ–π –ø—Ä–∏–±—ã–ª–∏.", reply_markup=keyboard.gm)
    await state.set_state(Form.calc)


@dp.message_handler(state=Form.calc)
async def profile(message: types.Message, state: FSMContext):
    money = message.text
    if money.isdigit():
        if round(int(money)) < 50001:
            day = round((int(money) / 100) * 3.2)
            month = round((int(money) / 100) * 3.2 * 30)
            year = round((int(money) / 100) * 3.2 * 365)
            await state.finish()
            await bot.send_message(message.from_user.id,text=f"üí± –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å—É–º–µ–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –ø—Ä–∏–±—ã–ª—å, –æ—Ç —Å—É–º–º—ã –≤–∞—à–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç:\n\nüíµ –í–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: {money}‚ÇΩ\n\n‚óºÔ∏è –ü—Ä–∏–±—ã–ª—å –≤ —Å—É—Ç–∫–∏: {day}‚ÇΩ\n‚óºÔ∏è –ü—Ä–∏–±—ã–ª—å –≤ –º–µ—Å—è—Ü: {month}‚ÇΩ\n‚óºÔ∏è –ü—Ä–∏–±—ã–ª—å –≤ –≥–æ–¥: {year}‚ÇΩ", reply_markup=keyboard.main)
        else:
            await bot.send_message(message.from_user.id,text=f"‚õî –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ 50.000‚ÇΩ", reply_markup=keyboard.gm)
    else:
        if message.text == "‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.finish()
            await bot.send_message(message.from_user.id,text=f"‚è™ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard.main)
        else:
            await bot.send_message(message.from_user.id,text=f"‚õî –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=keyboard.gm)

#–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —é–∑–µ—Ä–∞

@dp.message_handler(Text("üí≥ –ö–æ—à–µ–ª—ë–∫"))
async def balance(message: types.Message):
    await bot.send_message(message.from_user.id, f"ü§ñ –í–∞—à ID: {message.from_user.id}\nüí≥ –í–∞—à –ë–∞–ª–∞–Ω—Å: {db.user_balance(message.from_user.id)}‚ÇΩ\n\nüîî –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å —Å–≤–æ–∏–º –∫–æ—à–µ–ª—å–∫–æ–º", reply_markup=keyboard.currency)

@dp.message_handler(Text("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å"))
async def balancer(message: types.Message, state=FSMContext):
    await bot.send_message(message.from_user.id, text=f"–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å —Å—É–º–º–æ–π", reply_markup=keyboard.oplata)

#–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

@dp.callback_query_handler(text='fivehundret')
async def payfivehant(call : types.CallbackQuery):
    await bot.send_invoice(chat_id=call.from_user.id, title='–ü–æ–ø–æ–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', description="100", payload="fivehundret", provider_token=KASSA, currency='RUB', start_parameter= "balance", prices=[{"label": "–†—É–±", "amount": 50000}])

@dp.pre_checkout_query_handler()
async def oplataaa(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def oplataqweqwe(message: types.Message):
    if message.successful_payment.invoice_payload == 'fivehundret':
        await bot.send_message(message.from_user.id, f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        db.set_balance(message.from_user.id, balance =+ 500)

#–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥

@dp.message_handler(Text("‚ûñ –í—ã–≤–µ—Å—Ç–∏"))
async def lol(message: types.Message, state: FSMContext):
    await state.set_state(Form.vivod)
    await bot.send_message(message.from_user.id, text=f"‚óºÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.", reply_markup=keyboard.gm)


@dp.message_handler(state=Form.vivod)
async def get_addrebar(message: types.Message, state: FSMContext):
    user_balance = db.user_balance(message.from_user.id)
    if message.text.isdigit(): 
        if int(message.text) < 100:
             await bot.send_message(message.from_user.id,text=f"‚õî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 100 —Ä—É–±–ª–µ–π.", reply_markup=keyboard.gm)
        else:
            if user_balance < int(message.text):
                await bot.send_message(message.from_user.id,text=f"‚õî –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=keyboard.gm)
                return
            if db.check_vip(message.from_user.id):
                await bot.send_message(message.from_user.id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –µ—ë –Ω–æ–º–µ—Ä: {random.randint(1,1000)}, —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @exudusp")
                await state.finish()
            else:
                await bot.send_message(message.from_user.id,text=f"‚õî –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @exudusp", reply_markup=keyboard.main)
                await state.finish()
                
    else: 
        if message.text == "‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await bot.send_message(message.from_user.id,text=f"‚è™ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard.main)
            await state.finish()
        if message.text != "‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await bot.send_message(message.from_user.id,text=f"‚õî –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=keyboard.gm)


#–ò–Ω–≤–µ—Å—Ç–µ—Ü–∏–∏

@dp.message_handler(Text("‚ûï –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"))
async def balance(message: types.Message, state: FSMContext):
    await state.set_state(Form.invest)
    await bot.send_message(message.from_user.id, text=f"‚óºÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.", reply_markup=keyboard.gm)

#–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞—Ä–Ω—ë—Ä–∫—É

@dp.message_handler(Text("üë• –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"))
async def balfdsnce(message: types.Message):
    await bot.send_message(message.from_user.id, text=f"–í –¥–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ EXODUS –º—ã –ø–æ–¥–Ω–∏–º–µ–º —Ç–µ–º—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π.\n\nüë• –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ 'EXODUS FRIENDS' - –ø—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–∑–µ–π, –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ —Ä–µ–∫–ª–∞–º–∏—Ä—É–π –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ –ø–æ–ª—É—á–∞–π 10% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ —Å—á–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∑–∞—Å—á–∏—Ç–∞–ª–æ, –Ω—É–∂–Ω–æ —á—Ç–æ –±—ã –æ–Ω –ø–µ—Ä–µ—à–µ–ª –ø–æ —Ç–≤–æ–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ - https://t.me/{config.BOT_NICKNAME}?start={message.from_user.id}", reply_markup=keyboard.main)

@dp.message_handler(state=Form.invest)
async def get_addrefdsfds(message: types.Message, state: FSMContext):
    user_balance = db.user_balance(message.from_user.id)
    if message.text.isdigit(): 
        if int(message.text) < 100:
             await bot.send_message(message.from_user.id,text=f"‚õî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - 100 —Ä—É–±–ª–µ–π.", reply_markup=keyboard.gm)
        else:
            if user_balance < int(message.text):
                await bot.send_message(message.from_user.id,text=f"‚õî –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=keyboard.gm)
                return

            await state.finish()
            await bot.send_message(message.from_user.id,text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ {int(message.text)} —Ä—É–±–ª–µ–π", reply_markup=keyboard.main)
            db.add_invest(message.from_user.id, int(message.text))
            db.set_balance(message.from_user.id, int(message.text))
    else: 
        if message.text == "‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await bot.send_message(message.from_user.id,text=f"‚è™ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard.main)
            await state.finish()
        if message.text != "‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await bot.send_message(message.from_user.id,text=f"‚õî –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=keyboard.gm)

#–í—ã–≤–æ–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏

@dp.message_handler(Text("‚ûñ –°–æ–±—Ä–∞—Ç—å"))
async def balance(message: types.Message):
    all_cash, investment_text = get_investment_text(db.user_invests(message.from_user.id))
    money = db.all_invests(message.from_user.id)
    user_balance = db.user_balance(message.from_user.id)

    if money > 0:
        await bot.send_message(message.from_user.id, text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ —Å—á—ë—Ç {money + all_cash}‚ÇΩ", reply_markup=keyboard.investment)
    else:
        return await bot.send_message(message.from_user.id, text=f"‚õî –ù–∞ –≤–∞—à–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=keyboard.investment)

    db.set_balance(message.from_user.id, money+all_cash)
    db.dell_invests(message.from_id)

#–°—Ç–∞—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π(–Æ–∑–µ—Ä–∞)

@dp.message_handler(Text("üñ• –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"))
async def investments(message: types.Message):
    all_cash, investment_text = get_investment_text(db.user_invests(message.from_user.id))
    cash = round(all_cash)
    money = round(db.all_invests(message.from_user.id))
    if money == 'NULL':
        money = 0
    await bot.send_message(message.from_user.id, f"–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –Ω–∏–∂–µ, –∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å —Å –Ω–µ–≥–æ –∏ —Å–æ–±–∏—Ä–∞–π—Ç–µ –µ—ë –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ: \n\nüñ® –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤–∫–ª–∞–¥–∞: 3.2%\n‚è± –í—Ä–µ–º—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: 24 —á–∞—Åa\nüìÖ –°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞: –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ\n\nüí≥ –í–∞—à –≤–∫–ª–∞–¥: {money}‚ÇΩ\nüíµ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ: {cash}‚ÇΩ\n\n‚è± –í—Ä–µ–º—è –¥–æ —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤: 0:00:00", reply_markup=keyboard.investment)


@dp.message_handler(Text("üè¶ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å"))
async def to_balance(message: types.Message):
    all_cash, investment_text = get_investment_text(db.user_invests(message.from_user.id))
    await message.reply(f"–í–∞—à –¥–æ—Ö–æ–¥ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {all_cash} —Ä—É–±.\n\n", reply_markup=keyboard.investment_to_balance)


@dp.message_handler(regexp=r"^üí∏\d+$")
async def invest_sum(message: types.Message):
    cash = int(re.findall(r"(\d+)", message.text)[0])
    investment_sum, invest_text = get_investment_text(db.user_invests(message.from_user.id))

    if cash > investment_sum:
        return await message.reply(f"–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç—É —Å—É–º–º—É. –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {investment_sum} —Ä—É–±.")
    
    db.add_invest(message.from_user.id, "-" + cash)

    await message.reply(f"–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {cash} —Ä—É–±. –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å."
                        f"–ù–∞ –≤–∞—à–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å: {investment_sum - cash}")


@dp.message_handler(Text("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"))
async def invest(message: types.Message):
    await message.reply("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É", reply_markup=keyboard.investment_money)


@dp.message_handler(regexp=r"^üìà\d+$")
async def invest_sum(message: types.Message):
    cash = int(re.findall(r"(\d+)", message.text)[0])
    user_balance = db.user_balance(message.from_user.id)

    if cash > user_balance:
        return await message.reply(f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ {cash - user_balance} —Ä—É–±.")
    
    db.set_balance(message.from_user.id, user_balance=user_balance-cash)
    db.add_invest(message.from_user.id, cash)

    await message.reply(f"–í—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ {cash} —Ä—É–±. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å: {user_balance - cash}")


@dp.message_handler(Text("üí∏ –í—ã–≤–æ–¥"))
async def withdraw(message: types.Message):
    await message.reply("üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=keyboard.withdraw)


@dp.message_handler(Text("‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def to_main(message: types.Message, state: FSMContext):
   await bot.send_message(message.from_user.id,text=f"‚è™ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard.main)
   await state.finish()
        
#–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã        

@dp.message_handler(commands="addbalance")
async def addbalance(message: types.Message):
    if db.check_adm(message.from_user.id):
        args = message.text.split()
        db.set_balance(args[1], args[2]) # user id, money
        await bot.send_message(message.from_user.id, text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å.\nUID ¬ª {args[1]}\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ¬ª {args[2]}", reply_markup=keyboard.gm)
    else:
        await bot.send_message(message.from_user.id, f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message_handler(commands='awaybalance')
async def awaybalance(message : types.Message):
    if db.check_adm(message.from_user.id):
        args = message.text.split()
        db.awaybalance(args[1], args[2])
        await bot.send_message(message.from_user.id, text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–Ω—è–ª–∏ –±–∞–ª–∞–Ω—Å.\nUID ¬ª {args[1]}\n –ó–∞–±—Ä–∞–ª–∏ ¬ª {args[2]}", reply_markup=keyboard.gm)
    else:
        await bot.send_message(message.from_user.id, f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message_handler(commands="setbalance")
async def balancefdr(message: types.Message):
    if db.check_adm(message.from_user.id):
        args = message.text.split()
        db.set_balance(args[1], args[2])
        await bot.send_message(message.from_user.id, text=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.\nUID ¬ª {args[1]}\n–ë–∞–ª–∞–Ω—Å ¬ª {args[2]}", reply_markup=keyboard.gm)
    else:
        await bot.send_message(message.from_user.id, f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message_handler(commands=['stats'])
async def stats(message : types.Message):
    if db.check_adm(message.from_user.id):
        args = message.text.split()
        db.user_balance(args[1])
        await bot.send_message(message.from_user.id, f"–ë–∞–ª–∞–Ω—Å: {db.user_balance(args[1])} –†—É–±.")
    else:
        await bot.send_message(message.from_user.id, f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

#–∑–∞–ø–∞—Ä–æ–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –∞–¥–º–∏–Ω–∫–µ

@dp.message_handler(commands=['adm'])
async def admstart(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫ –∞–¥–º–∏–Ω–∫–µ.')
    await state.set_state(Form.admPass)

@dp.message_handler(state = Form.admPass)
async def password(message: types.Message, state: FSMContext):
    if message.text.isdigit(): 
        if int(message.text) == 2121:
                if db.check_adm(message.from_user.id):
                    await bot.send_message(message.from_user.id,text=f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø–∏—à–∏—Ç–µ /stats ID (/stats 4358734)\n\n–ß—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏—Å–ø–æ–ª–¥—å–∑—É–π—Ç–µ: /setbalance ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥(/setbalance 656545654 12000000).\n\n –ß—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é(—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º) –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addbalance ID usera –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥. \n\n –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ /awaybalance ID –ö–æ–ª-–≤–æ –¥–µ–Ω–µ–≥.\n\n\n –í–ù–ò–ú–ê–ù–ò–ï \n\n\n –ü–ï–†–ï–î –¢–ï–ú, –ö–ê–ö –°–ü–ò–°–ê–¢–¨ –î–ï–ù–¨–ì–ò –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û–°–ú–û–¢–†–ò–¢–ï –ë–ê–õ–ê–ù–°, –î–ê–ë–´ –ù–ï –°–û–ó–î–ê–¢–¨ –ü–†–û–ë–õ–ï–ú! \n\n –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–µ. –ò –≤–Ω–µ —ç—Ç–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞. ", reply_markup=keyboard.gm)
                else:
                    await bot.send_message(message.from_user.id, f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, —É–≤–µ–¥–æ–º–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.")
                    await state.finish()
    else: 
        if message.text== "‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await state.finish()
            await bot.send_message(message.from_user.id,text=f"‚è™ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard.main)

@dp.message_handler(Text('–í–∏–ø —Å—Ç–∞—Ç—É—Å'))
async def vipMain(message: types.Message):
    await bot.send_message(message.from_user.id, f"ü§© –í–∏–ø —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:\nüï∂ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å\nüí∞ –í—ã–≤–æ–¥ –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\nüë´ –í–∏–ø-—á–∞—Ç\n\nüí∏ –¶–µ–Ω–∞ 500 —Ä—É–±.", reply_markup=keyboard.vip)

@dp.message_handler(Text('–ö—É–ø–∏—Ç—å –≤–∏–ø —Å—Ç–∞—Ç—É—Å'))
async def buyvip(message: types.Message):
    priceVip = 500
    if priceVip > db.user_balance(message.from_user.id):
        await bot.send_message(message.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.', reply_markup=keyboard.main)
    elif db.check_vip(message.from_user.id) == 1:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∏–ø-—Å—Ç–∞—Ç—É—Å")
    else:
        await bot.send_message(message.from_user.id, f"–í–∞–º –≤—ã–¥–∞–Ω–∞ –≤–∏–ø–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, —Å–ø–∞—Å–∏–±–æ.")
        db.awaybalance(message.from_user.id, 500)
        db.vip(message.from_user.id, +1)
    

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
